'use client';

import { useState, useEffect } from 'react';
import { useVWE_MapViewer } from '@/hooks/useVWE_MapViewer';
import { VWE_MapViewerData } from '@/types/vwe_mapviewer';

interface VWE_MapViewerProps {
  initialData?: VWE_MapViewerData;
}

export default function VWE_MapViewer({ initialData }: VWE_MapViewerProps) {
  const { data, loading, error, refetch } = useVWE_MapViewer();
  const [count, setCount] = useState(0);

  useEffect(() => {
    if (initialData) {
      console.log('Initial data received:', initialData);
    }
  }, [initialData]);

  const handleIncrement = () => {
    setCount(prev => prev + 1);
  };

  const handleDecrement = () => {
    setCount(prev => Math.max(0, prev - 1));
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span className="ml-2 text-gray-600">Loading...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-md p-4">
        <div className="flex">
          <div className="ml-3">
            <h3 className="text-sm font-medium text-red-800">
              Error loading data
            </h3>
            <div className="mt-2 text-sm text-red-700">
              {error}
            </div>
            <div className="mt-4">
              <button
                onClick={refetch}
                className="bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded-md text-sm font-medium"
              >
                Try again
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="bg-white overflow-hidden shadow rounded-lg">
        <div className="px-4 py-5 sm:p-6">
          <h3 className="text-lg leading-6 font-medium text-gray-900">
            VWE_MapViewer Component
          </h3>
          <div className="mt-2 max-w-xl text-sm text-gray-500">
            <p>
              This is a sample component generated by the VWE TypeScript generator.
              It demonstrates state management, API integration, and error handling.
            </p>
          </div>
        </div>
      </div>

      <div className="bg-white overflow-hidden shadow rounded-lg">
        <div className="px-4 py-5 sm:p-6">
          <h3 className="text-lg leading-6 font-medium text-gray-900">
            Counter Example
          </h3>
          <div className="mt-4 flex items-center space-x-4">
            <button
              onClick={handleDecrement}
              className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium"
            >
              -
            </button>
            <span className="text-2xl font-bold text-gray-900">{count}</span>
            <button
              onClick={handleIncrement}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium"
            >
              +
            </button>
          </div>
        </div>
      </div>

      {data && (
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900">
              API Data
            </h3>
            <div className="mt-2">
              <pre className="bg-gray-100 p-4 rounded-md text-sm overflow-x-auto">
                {JSON.stringify(data, null, 2)}
              </pre>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
