#!/usr/bin/env python3
"""
Generator Configuration for Valheim World Engine
Centralized configuration and utilities for all code generators
"""

import os
import json
from pathlib import Path
from typing import Dict, Any, List, Optional
from dataclasses import dataclass, asdict
from enum import Enum


class GeneratorType(Enum):
    """Supported generator types"""
    CSHARP = "csharp"
    PYTHON = "python"
    TYPESCRIPT = "typescript"


@dataclass
class GeneratorConfig:
    """Configuration for code generators"""
    
    # Base configuration
    base_path: str = "."
    output_dir: str = "output"
    templates_dir: str = "templates"
    
    # VWE specific configuration
    vwe_version: str = "1.0.0"
    vwe_author: str = "VWE"
    vwe_license: str = "MIT"
    
    # Default values for generated code
    default_version: str = "1.0.0"
    default_author: str = "VWE"
    default_description: str = "Generated by Valheim World Engine"
    
    # Technology-specific defaults
    csharp_target_framework: str = "net48"
    csharp_bepinex_version: str = "5.4.22"
    csharp_harmony_version: str = "2.10.1"
    
    python_fastapi_version: str = "0.104.1"
    python_pydantic_version: str = "2.5.0"
    python_uvicorn_version: str = "0.24.0"
    
    typescript_nextjs_version: str = "14.0.0"
    typescript_react_version: str = "18.2.0"
    typescript_tailwind_version: str = "3.3.0"
    
    # File naming conventions
    use_kebab_case: bool = True
    use_pascal_case: bool = True
    use_snake_case: bool = True
    
    # Generated code features
    include_docker: bool = True
    include_tests: bool = True
    include_documentation: bool = True
    include_ci_cd: bool = False
    
    # VWE integration
    vwe_api_base_url: str = "http://localhost:8000"
    vwe_data_dir: str = "/app/data"
    vwe_redis_url: str = "redis://localhost:6379"
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert configuration to dictionary"""
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'GeneratorConfig':
        """Create configuration from dictionary"""
        return cls(**data)
    
    @classmethod
    def from_file(cls, config_path: str) -> 'GeneratorConfig':
        """Load configuration from JSON file"""
        with open(config_path, 'r') as f:
            data = json.load(f)
        return cls.from_dict(data)
    
    def save_to_file(self, config_path: str) -> None:
        """Save configuration to JSON file"""
        with open(config_path, 'w') as f:
            json.dump(self.to_dict(), f, indent=2)


class GeneratorRegistry:
    """Registry for managing available generators"""
    
    def __init__(self):
        self._generators: Dict[GeneratorType, str] = {}
        self._register_default_generators()
    
    def _register_default_generators(self):
        """Register default VWE generators"""
        self._generators[GeneratorType.CSHARP] = "csharp_generator.CSharpGenerator"
        self._generators[GeneratorType.PYTHON] = "python_generator.PythonGenerator"
        self._generators[GeneratorType.TYPESCRIPT] = "typescript_generator.TypeScriptGenerator"
    
    def register_generator(self, generator_type: GeneratorType, module_path: str):
        """Register a custom generator"""
        self._generators[generator_type] = module_path
    
    def get_generator_class(self, generator_type: GeneratorType):
        """Get generator class by type"""
        if generator_type not in self._generators:
            raise ValueError(f"Generator type {generator_type} not registered")
        
        module_path = self._generators[generator_type]
        module_name, class_name = module_path.rsplit('.', 1)
        
        try:
            module = __import__(module_name, fromlist=[class_name])
            return getattr(module, class_name)
        except (ImportError, AttributeError) as e:
            raise ImportError(f"Could not import generator {module_path}: {e}")
    
    def list_generators(self) -> List[GeneratorType]:
        """List all registered generator types"""
        return list(self._generators.keys())


class VWETemplateManager:
    """Manages VWE-specific templates and configurations"""
    
    def __init__(self, config: GeneratorConfig):
        self.config = config
        self.templates_dir = Path(config.base_path) / config.templates_dir
    
    def get_template_path(self, generator_type: GeneratorType, template_name: str) -> Path:
        """Get path to a specific template"""
        return self.templates_dir / generator_type.value / template_name
    
    def template_exists(self, generator_type: GeneratorType, template_name: str) -> bool:
        """Check if a template exists"""
        return self.get_template_path(generator_type, template_name).exists()
    
    def load_template(self, generator_type: GeneratorType, template_name: str) -> str:
        """Load template content"""
        template_path = self.get_template_path(generator_type, template_name)
        if not template_path.exists():
            raise FileNotFoundError(f"Template not found: {template_path}")
        return template_path.read_text()
    
    def save_template(self, generator_type: GeneratorType, template_name: str, content: str) -> None:
        """Save template content"""
        template_path = self.get_template_path(generator_type, template_name)
        template_path.parent.mkdir(parents=True, exist_ok=True)
        template_path.write_text(content)
    
    def list_templates(self, generator_type: GeneratorType) -> List[str]:
        """List available templates for a generator type"""
        type_dir = self.templates_dir / generator_type.value
        if not type_dir.exists():
            return []
        return [f.name for f in type_dir.iterdir() if f.is_file()]


class VWECodeStyle:
    """VWE code style guidelines and utilities"""
    
    @staticmethod
    def format_name(name: str, case: str = "kebab") -> str:
        """Format name according to VWE conventions"""
        if case == "kebab":
            return name.lower().replace("_", "-").replace(" ", "-")
        elif case == "snake":
            return name.lower().replace("-", "_").replace(" ", "_")
        elif case == "pascal":
            return "".join(word.capitalize() for word in name.replace("-", " ").replace("_", " ").split())
        elif case == "camel":
            pascal = VWECodeStyle.format_name(name, "pascal")
            return pascal[0].lower() + pascal[1:] if pascal else ""
        else:
            return name
    
    @staticmethod
    def generate_vwe_comment(component_type: str, name: str, description: str = "") -> str:
        """Generate VWE-style comment header"""
        return f"""/*
 * {component_type}: {name}
 * Generated by Valheim World Engine
{f" * {description}" if description else ""}
 * 
 * This file is part of the VWE ecosystem.
 * Do not modify manually - use the VWE generators instead.
 */"""
    
    @staticmethod
    def get_vwe_imports(generator_type: GeneratorType) -> List[str]:
        """Get standard VWE imports for generator type"""
        if generator_type == GeneratorType.CSHARP:
            return [
                "using BepInEx;",
                "using BepInEx.Configuration;",
                "using BepInEx.Logging;",
                "using HarmonyLib;",
                "using UnityEngine;"
            ]
        elif generator_type == GeneratorType.PYTHON:
            return [
                "from fastapi import FastAPI, HTTPException, Depends",
                "from pydantic import BaseModel",
                "from typing import List, Optional, Dict, Any",
                "import logging"
            ]
        elif generator_type == GeneratorType.TYPESCRIPT:
            return [
                "import React from 'react';",
                "import { useState, useEffect } from 'react';",
                "import { NextRequest, NextResponse } from 'next/server';"
            ]
        return []


class GeneratorFactory:
    """Factory for creating generator instances with VWE configuration"""
    
    def __init__(self, config: GeneratorConfig = None):
        self.config = config or GeneratorConfig()
        self.registry = GeneratorRegistry()
        self.template_manager = VWETemplateManager(self.config)
    
    def create_generator(self, generator_type: GeneratorType, **kwargs):
        """Create a generator instance with VWE configuration"""
        generator_class = self.registry.get_generator_class(generator_type)
        
        # Merge VWE config with generator-specific kwargs
        generator_kwargs = {
            "base_path": self.config.base_path,
            **kwargs
        }
        
        return generator_class(**generator_kwargs)
    
    def create_csharp_generator(self, **kwargs):
        """Create C# generator with VWE configuration"""
        return self.create_generator(GeneratorType.CSHARP, **kwargs)
    
    def create_python_generator(self, **kwargs):
        """Create Python generator with VWE configuration"""
        return self.create_generator(GeneratorType.PYTHON, **kwargs)
    
    def create_typescript_generator(self, **kwargs):
        """Create TypeScript generator with VWE configuration"""
        return self.create_generator(GeneratorType.TYPESCRIPT, **kwargs)


def load_vwe_config(config_path: str = None) -> GeneratorConfig:
    """Load VWE generator configuration"""
    if config_path is None:
        config_path = os.path.join(os.path.dirname(__file__), "vwe_config.json")
    
    if os.path.exists(config_path):
        return GeneratorConfig.from_file(config_path)
    else:
        # Create default config and save it
        config = GeneratorConfig()
        config.save_to_file(config_path)
        return config


def create_vwe_factory(config_path: str = None) -> GeneratorFactory:
    """Create VWE generator factory with configuration"""
    config = load_vwe_config(config_path)
    return GeneratorFactory(config)


# Convenience functions for common use cases
def generate_bepinex_plugin(plugin_name: str, description: str = "", **kwargs) -> Dict[str, str]:
    """Generate a BepInEx plugin with VWE configuration"""
    factory = create_vwe_factory()
    generator = factory.create_csharp_generator()
    return generator.create_bepinex_plugin(plugin_name, description, **kwargs)


def generate_fastapi_service(service_name: str, description: str = "", **kwargs) -> Dict[str, str]:
    """Generate a FastAPI service with VWE configuration"""
    factory = create_vwe_factory()
    generator = factory.create_python_generator()
    return generator.create_fastapi_service(service_name, description, **kwargs)


def generate_nextjs_app(app_name: str, description: str = "", **kwargs) -> Dict[str, str]:
    """Generate a Next.js application with VWE configuration"""
    factory = create_vwe_factory()
    generator = factory.create_typescript_generator()
    return generator.create_nextjs_app(app_name, description, **kwargs)


def main():
    """Example usage of the generator configuration system"""
    print("VWE Generator Configuration System")
    print("=" * 40)
    
    # Load configuration
    config = load_vwe_config()
    print(f"Loaded configuration: {config.vwe_version}")
    
    # Create factory
    factory = create_vwe_factory()
    print(f"Available generators: {factory.registry.list_generators()}")
    
    # Example: Generate a BepInEx plugin
    print("\\nGenerating BepInEx plugin...")
    files = generate_bepinex_plugin(
        plugin_name="VWE_ExamplePlugin",
        description="Example plugin generated with VWE config"
    )
    print(f"Generated {len(files)} files")
    
    # Example: Generate a FastAPI service
    print("\\nGenerating FastAPI service...")
    files = generate_fastapi_service(
        service_name="VWE_ExampleService",
        description="Example service generated with VWE config"
    )
    print(f"Generated {len(files)} files")
    
    # Example: Generate a Next.js app
    print("\\nGenerating Next.js application...")
    files = generate_nextjs_app(
        app_name="VWE_ExampleApp",
        description="Example app generated with VWE config"
    )
    print(f"Generated {len(files)} files")
    
    print("\\nVWE Generator Configuration System demo complete!")


if __name__ == "__main__":
    main()
